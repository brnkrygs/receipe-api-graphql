type Query {
  "The recipe collection"
  recipes: [Recipe]
  "Get a specific recipe"
  recipe( id: String! ): Recipe
  "The author collection"
  authors: [Author]
  "The notes collection"
  notes: [Note]
  "The ingredient collection"
  ingredients: [Ingredient]
}

"""Define a recipe"""
type Recipe {
  id: ID!
  title: String
  name: String @deprecated( reason: "Moved to title" )
  "The steps involved in cooking the recipe"
  steps( first:Boolean ): [RecipeStep]
  "The initial creator for the recipe"
  author: Author
  "URL for the recipe"
  url(w:Int, h:Int): String
  "User-created notes"
  notes: [Note]
}

"""A step in a recipe"""
type RecipeStep{
  id: ID!
  step: Int
  instructions: String
  "Parent recipe"
  recipe: Recipe
}

type Author {
  id: ID!
  nickname: String
  "Homepage for this Author"
  website: String
  "Image for this Author"
  avatar: Avatar
  "The recipes this author has created"
  recipes: [Recipe]
}

type Avatar {
  id: ID!
  url(w:Int, h:Int): String
  alt: String
}

type Note {
  id: ID!
  title: String
  "Details for the note"
  body: String
  "Parent recipe"
  recipe: Recipe
}

type Food {
  id: ID!
  title: String
}

type Drink {
  id: ID!
  name: String
  isCarbonated: Boolean
}

union Ingredient = Food | Drink